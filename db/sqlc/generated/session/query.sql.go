// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package session

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :exec
WITH
    deleted_session AS (
        DELETE FROM sessions
        WHERE
            user_id = $1
        RETURNING
            id, user_id, refresh_token
    )
INSERT INTO
    sessions (user_id, refresh_token)
VALUES ($1, $2)
`

type CreateSessionParams struct {
	UserID       pgtype.UUID
	RefreshToken string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.Exec(ctx, createSession, arg.UserID, arg.RefreshToken)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE user_id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, userID)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, refresh_token FROM sessions WHERE user_id = $1
`

func (q *Queries) GetSession(ctx context.Context, userID pgtype.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, userID)
	var i Session
	err := row.Scan(&i.ID, &i.UserID, &i.RefreshToken)
	return i, err
}
